local a,b=...local c=HeroLib;local d=b.Cast;local e,f=HeroCache,c.Utils;local g=c.Unit;local h=g.Player;local j=g.MouseOver;local k=g.Target;local l=c.Spell;local m=c.Item;local n;local o;local pairs=pairs;local p=string.gsub;local UnitInParty=UnitInParty;local UnitInRaid=UnitInRaid;b.Commons={}local q={}b.Commons.Everyone=q;local r=b.GUISettings.General;local s=b.GUISettings.Abilities;function q.TargetIsValid()return k:Exists()and h:CanAttack(k)and not k:IsDeadOrGhost()end;function q.UnitIsCycleValid(g,t,u)return not g:IsFacingBlacklisted()and not g:IsUserCycleBlacklisted()and(not t or g:FilteredTimeToDie(">",t,u))end;function q.CanDoTUnit(g,v)return g:Health()>=v or g:IsDummy()end;local w={Buff={l(191941),l(204151),l(239932)},Debuff={348074,358988,347607,351180,353929},Cast={197810,197418,198079,214003,235751,193668,227493,228852,193211,200732,241635,241636,236494,239932,254919,244899,245458,248499,258039,346985,350828,350202,350475,351066,350422,352538,350732,348071},Channel={}}local x={Buff={},Debuff={},Cast={350732,355352,353603},Channel={}}function q.ActiveMitigationNeeded()if not h:IsTanking(k)then return false end;if w.Cast[k:CastSpellID()]then return true end;for _,y in pairs(w.Buff)do if k:BuffUp(y,true)then return true end end;for _,z in pairs(w.Debuff)do local _,_,A,_,_,_,_,_,_,B,_,_,_,_,_,_=UnitDebuff("player",z)if B~=nil then if z==B then return true end end end;return false end;local function C(l,D,E,F)if F then if l:IsReady()and l:CooldownRemains(BypassRecovery)<=0 and D and D:Exists()and D:IsSpellInRange(l)and D:NPCID()==E and not h:IsPlayerMoving()then return true else return false end else if l:IsReady()and l:CooldownRemains(BypassRecovery)<=0 and D and D:Exists()and D:IsSpellInRange(l)and D:NPCID()==E then return true else return false end end end;do local G=194648;function q.HandleIncorporeal(l,D,H,F)if not H then H=40 end;return C(l,D,G,F)end end;do local I=204773;function q.HandleAfflicted(l,D,H,F)if not H then H=40 end;return C(l,D,I,F)end end;function q.BigActiveMitigationNeeded()if not h:IsTanking(k)then return false end;if x.Cast[k:CastSpellID()]then return true end;for _,y in pairs(x.Buff)do if k:BuffUp(y,true)then return true end end;for _,z in pairs(x.Debuff)do local _,_,A,_,_,_,_,_,_,B,_,_,_,_,_,_=UnitDebuff("player",i)if B~=nil then if z==B then return true end end end;return false end;do local J={Debuff={l(243961)}}function h:HealingAbsorbed()for _,z in pairs(J.Debuff)do if h:DebuffUp(z,true)then return true end end;return false end end;function q.IsSoloMode()return r.SoloMode and not h:IsInRaidArea()and not h:IsInDungeonArea()end;function q.CastCycle(K,L,M,N,O,P)if M(k)then return b.Cast(K,O,P,N)end;if b.AoEON()then local Q=k:GUID()for _,R in pairs(L)do if R:GUID()~=Q and not R:IsFacingBlacklisted()and not R:IsUserCycleBlacklisted()and M(R)then b.CastLeftNameplate(R,K)break end end end end;function q.CastTargetIf(K,L,S,T,M,N,O,P)local U=not M or M and M(k)if not b.AoEON()and U then return b.Cast(K,O,P,N)end;if b.AoEON()then local V,W=nil,nil;for _,R in pairs(L)do if not R:IsFacingBlacklisted()and not R:IsUserCycleBlacklisted()and(R:AffectingCombat()or R:IsDummy())and(not W or f.CompareThis(S,T(R),W))then V,W=R,T(R)end end;if V then if U and(V:GUID()==k:GUID()or W==T(k))then return b.Cast(K,O,P,N)elseif M and M(V)or not M then b.CastLeftNameplate(V,K)end end end end;function q.GroupBuffMissing(X)local Y=40;if X:Name()=="Battle Shout"then Y=100 end;local Z;if UnitInRaid("player")then Z=g.Raid elseif UnitInParty("player")then Z=g.Party else return false end;for _,a0 in pairs(Z)do if a0:Exists()and a0:IsInRange(Y)and a0:BuffDown(X,true)then return true end end;return false end;function q.GetCurrentEmpowerData(a1)local a2=0;local a3={}_,_,_,StartTimeMS,EndTimeMS,_,_,_,_,StageTotal=UnitChannelInfo("player")if StageTotal and StageTotal>0 then local a4=0;for i=1,StageTotal do a3[i]={Start=a4,Finish=a4+GetUnitEmpowerStageDuration("player",i-1)/1000}b.Print(" Start"..i..": "..a3[i].Start)b.Print("Finish"..i..": "..a3[i].Finish)a4=a3[i].Finish;if StartTimeMS/1000+a4<=GetTime()then a2=i end end end;if a1 then return a2 else return a3 end end;function q.PotionSelected()local a5={"Warrior","Paladin","Hunter","Rogue","Priest","DeathKnight","Shaman","Mage","Warlock","Monk","Druid","DemonHunter","Evoker"}local a6=e.Persistent.Player.Class[3]local a7=a5[a6]local a8={[250]="Blood",[251]="Frost",[252]="Unholy",[577]="Havoc",[581]="Vengeance",[102]="Balance",[103]="Feral",[104]="Guardian",[105]="Restoration",[1467]="Devastation",[1468]="Preservation",[1473]="Augmentation",[253]="BeastMastery",[254]="Marksmanship",[255]="Survival",[62]="Arcane",[63]="Fire",[64]="Frost",[268]="Brewmaster",[269]="Windwalker",[270]="Mistweaver",[65]="Holy",[66]="Protection",[70]="Retribution",[256]="Discipline",[257]="Holy",[258]="Shadow",[259]="Assassination",[260]="Outlaw",[261]="Subtlety",[262]="Elemental",[263]="Enhancement",[264]="Restoration",[265]="Affliction",[266]="Demonology",[267]="Destruction",[71]="Arms",[72]="Fury",[73]="Protection"}local a9=e.Persistent.Player.Spec[1]local aa=a8[a9]local ab=b.GUISettings.APL[a7][aa].PotionType.Selected;local ac={191914,191913,191912,191907,191906,191905,191383,191382,191381,191389,191388,191387}local ad={191365,191364,191363}local ae={191368,191367,191366}local af={191401,191400,191399}if ab=="Power"then for _,ag in ipairs(ac)do if m(ag):IsUsable()then return m(ag)end end elseif ab=="Frozen Focus"then for _,ag in ipairs(ad)do if m(ag):IsUsable()then return m(ag)end end elseif ab=="Chilled Clarity"then for _,ag in ipairs(ae)do if m(ag):IsUsable()then return m(ag)end end elseif ab=="Shocking Disclosure"then for _,ag in ipairs(af)do if m(ag):IsUsable()then return m(ag)end end else return nil end end;do q.MplusBasicKick={}q.MplusBasicCC={332329,332671,332156,334664,326450,325701,331743,322569,324987,325021,320822,321807,321780,320822,334747,338022,328400,328177,336451,328429,328338,329163,321935,324609,300777,330586,333540,330532,330694,295985,335528,330822,304254,332181,297966,358328,241687,355915,356031,355057,355132,322169,228279,166398,228603,241828,293827,300436,300087,163966,373570,383823,387135,153153}q.RaidBasicKick={77472,82326,360176,366392,364030,360259,362383,361913,350342,350286,350283,351779,357144,348428,352141,355540,325590,337110,325590,328254,333002,337110,333002,331550,337110,325590,328254,325665,344776,337865,333145,342288,328248,334708,364073,365008}q.MplusAdvancedKick={19750,8004,82326,388392,396812,377389,396640,387843,387955,387910,253517,256849,253544,255824,255041,252781,250368,253583,250096,252923,375596,375602,387564,386546,389804,377488,225573,227913,200248,199663,204896,384633,377950,372711,373897,382474,367500,382249,382410,367503,374544,385029,373804,381770,211401,211464,207980,208165,207881,225562,200630,200642,204243,201399,201839,407891,417481,411994,415770,416254,418200,418202,417018,407124,407121,412233,412378,411300,413606,257737,256060,257784,281420,266950,257732,258321,257397,258323,259092,257736,376171,374066,374339,374045,374080,389443,395694,374563,385141,374706,375384,375950,377348,377402,387618,325700,326607,323552,323538,325876,338003,328322,374045,374339,374563,374699,385036,198595,198959,192288,199726,198750,322938,324914,324776,326046,340544,337235,337251,337253,322450,321828,322767,323057,335143,334748,330784,324293,338353,323190,327130,328667,320571,395427,372223,378282,383656,384158,372615,372538,384161,382795,186269,193585,202181,387440,386012,397394,384365,386024,387411,387606,376725,384808,373395,340210,328180,321999,328094,328016,329239,329917,327995,328002,328094,322358,328534,328475,228025,232115,226344,227616,228278,241808,227823,227800,228606,227776,227341,228254,228239,228700,227592,229083,374743,392576,392486,371984,384194,373017,392398,392451,385310,375602,386546,387564,373932,386546,319654,322433,321038,334653,335305,336277,326952,326836,326712,326837,320861,321105,152818,156776,156722,398206,156718,153524,327413,317936,317963,328295,328137,328331,327648,317959,327481,317661,354297,355225,355234,357284,357260,351119,352347,356843,355888,355930,355934,354297,356324,356404,356407,355641,353835,347775,347903,350922,357188,397888,114646,395859,396073,397914,341902,330784,333231,320300,320120,341969,330703,342139,330562,330810,330868,341771,330875,342675,323190,165213,164887,168082,427459,169839,164965,427459,169841,173563,76813,76820,426768,428263,428103,429176,426783,428526,263085,294526,330438,297018,252057,252063,328869,297310,330477,332165,329930,294517,296839,294165,330118,183345,297024,258935,277040,242391,330573,326399,345554,327461,330479,310392,184381,334538,329322,330755,295929,318995,167012,354493,352215,304946,369365,377500,328206,369675,369674,369823,369603,369399,369400,260879,266209,278755,265091,265089,278961,266106,272180,265433,265487,88170,160209,88959,87779,410870,410760,88186,265368,265407,264050,263959,263943,264390,266036,268278,266225,264520,263891,265346,265876,260698,264407,426541,265346,267824,332707,332666,332706,332612,332084,321764,320008,332608,328740,323064,332605,328707,333875,334076,332196,331379,332234,332705,408805,373747,373570,301088,300764,284219,300650,300171,299588,300414,166335,178154,165122,253239,258653,267824,264456,273653,268202,200291,201139,214002,200345,200784,198904,427245,426905,76516,412012,415439,407120,411610,265377,193803,183526,188587,257739,274400,258673,378818,378831,372224,372583,369466,377732,369828,389443,393432,375950,367485,385058,383392,384974,383823,387608,388899,372735,385536,386526,370225,375591,163966,300087,300777,300436,293827,241828,228603,227917,355132,355057,356031,355915,241687,358328,297966,332181,304254,330822,335528,295985,330694,330532,333540,330586,322169,324609,321935,328338,329163,328429,336451,328177,328400,338022,334747,321807,321780,320822,334747,320822,324987,325021,331743,322569,325701,326450,334664,332156,332671,332329,153153,387135,383823}local ah={1,l}function q.Intterupt(l,g)local ai=math.random(1,20)if not g then g=k end;if r.InterruptEnabled then if g:IsInterruptible()and g:CastPercentage()>=(r.InterruptTH+ai or 20+ai)and l:IsReady()and g:IsSpellInRange(l)then if r.UseRaidList then if f.ValueIsInArray(q.MplusBasicKick,g:CastSpellID())or f.ValueIsInArray(q.MplusBasicCC,g:CastSpellID())or f.ValueIsInArray(q.RaidBasicKick,g:CastSpellID())or f.ValueIsInArray(q.MplusAdvancedKick,g:CastSpellID())then return true end else if f.ValueIsInArray(q.MplusBasicKick,g:CastSpellID())or f.ValueIsInArray(q.MplusBasicCC,g:CastSpellID())or f.ValueIsInArray(q.MplusAdvancedKick,g:CastSpellID())then return true end;return false end end;return false end end;function q.IntteruptWithStun(l,g)local ai=math.random(1,20)if not g then g=k end;if r.InterruptWithStun then if g:IsInterruptible()and g:CastPercentage()>=(r.InterruptTH+ai or 20+ai)and l:IsReady()and g:IsSpellInRange(l)then if r.UseRaidList then if f.ValueIsInArray(q.MplusBasicKick,g:CastSpellID())or f.ValueIsInArray(q.MplusBasicCC,g:CastSpellID())or f.ValueIsInArray(q.RaidBasicKick,g:CastSpellID())or f.ValueIsInArray(q.MplusAdvancedKick,g:CastSpellID())then return true end else if f.ValueIsInArray(q.MplusBasicKick,g:CastSpellID())or f.ValueIsInArray(q.MplusBasicCC,g:CastSpellID())or f.ValueIsInArray(q.MplusAdvancedKick,g:CastSpellID())then return true end;return false end end else return false end end end;q.LastTargetSwap=0;function q.useEvaluate(aj,M,ak,al,am,l)if M and aj:GUID()==g("mouseover"):GUID()and ak=="Mouseover"then o=am;return true elseif M and ak=="AutoSwap"and aj:GUID()~=k:GUID()and not al then o=999;b.Print("TAB TARGET")return true elseif M and aj:GUID()==k:GUID()then n=l;return true elseif M then return true end end